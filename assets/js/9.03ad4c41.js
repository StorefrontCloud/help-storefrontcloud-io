(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{384:function(e,t,o){"use strict";o.r(t);var i=o(42),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"build-docker-image"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#build-docker-image"}},[e._v("#")]),e._v(" Build docker image")]),e._v(" "),o("h2",{attrs:{id:"building-images-with-kaniko-and-gitlab-ci-cd"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#building-images-with-kaniko-and-gitlab-ci-cd"}},[e._v("#")]),e._v(" Building images with Kaniko and GitLab CI/CD")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-workflow-with-docker-executor",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker-in-docker builds"),o("OutboundLink")],1),e._v(" requires privileged mode in order to function, which is a significant security concern and because of that, we recommend using "),o("a",{attrs:{href:"https://github.com/GoogleContainerTools/kaniko",target:"_blank",rel:"noopener noreferrer"}},[e._v("kaniko"),o("OutboundLink")],1),e._v(" to build docker images. On the Storefront Cloud CI is configured to use Kaniko by default. More information about GitLab and Kaniko you can find in "),o("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/docker/using_kaniko.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitLab documentation"),o("OutboundLink")],1)]),e._v(" "),o("h2",{attrs:{id:"building-image-for-vue-storefront-and-vue-storefront-api"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#building-image-for-vue-storefront-and-vue-storefront-api"}},[e._v("#")]),e._v(" Building image for Vue Storefront and Vue Storefront API")]),e._v(" "),o("p",[e._v("The code below is a standard configuration for the build stage in both Vue Storefront and Vue Storefront API applications.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('build:\n  stage: build\n  image:\n    name: gcr.io/kaniko-project/executor:debug\n    entrypoint: [""]\n  script:\n    - echo "{\\"auths\\":{\\"$REGISTRY_URL\\":{\\"username\\":\\"$REGISTRY_USER\\",\\"password\\":\\"$REGISTRY_PASSWORD\\"}}}" > /kaniko/.docker/config.json\n    - TAG=${CI_COMMIT_SHA:0:8}\n    - if [ -n "$CI_COMMIT_TAG" ]; then TAG=$CI_COMMIT_TAG; fi\n    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dev/docker/Dockerfile --destination $REGISTRY_IMAGE:$TAG\n  only:\n    - develop\n    - tags\n')])])]),o("p",[e._v("How read this configuration? Let's focus on the "),o("code",[e._v("script")]),e._v(" definition. In the first line of the "),o("code",[e._v("script")]),e._v(" definition is created a file with access data to our "),o("a",{attrs:{href:"https://docs.docker.com/registry/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Registry"),o("OutboundLink")],1),e._v(" where all images are stored. Access to the Docker Registry is limited, user and pass are variables stored in GitLab, about our Docker Registry is separated "),o("RouterLink",{attrs:{to:"/guide/ci/docker-registry.html"}},[e._v("article")]),e._v(". In the second line is created docker tag name. In the third line is chacked if is git tag (deploy on prod is limited only to tagged versions, "),o("RouterLink",{attrs:{to:"/guide/ci/deployment.html"}},[e._v("read more")]),e._v("). In the last line, the docker image is built. As you can see docker image is built from "),o("code",[e._v("Dockerfile")]),e._v(" which is part of the application code and is stored in directory "),o("code",[e._v("dev/docker/Dockerfile")]),e._v(". This job is running only for branch "),o("code",[e._v("develop")]),e._v(" or for git tag.")],1)])}),[],!1,null,null,null);t.default=r.exports}}]);